/* Fluster Bison Grammar */

%require "3.4"
%language "c++" /* generates C++ lalr(1) parser */

%define api.namespace {yy}
%define api.parser.class {Parser}
%define api.value.type variant
%define api.token.constructor

%define parse.trace
%define parse.error verbose
%define parse.assert
%printer { yyo << $$; } <*>;

%locations
%define api.location.file "location.gen.h"
%defines "parser.gen.h"
%output "parser.gen.cpp"

%parse-param { yy::Lexer& lexer }  /*construct parser object with lexer*/
%parse-param { fluster::ast::Node::Ptr& root }  /*construct parser object with lexer*/

/* code in this block goes in parser.gen.h */
%code requires {
  //#include "driver.h"
  #include "ast/ast.h"
  //XXX: remove this so inclusion doesn't use the namespace!
  namespace yy {
    class Lexer;  // reflex --namespace=yy --lexer=Lexer --lex=yylex
  }
  #undef yylex  //unlink the global yylex
  #define yylex lexer.lex  //within bison's parse invoke lexer.yylex()
}

%code top {
  #include <string>
  #include "util/ptrs.h"
  #include "atoms/types.h"
}

%code {
  #include <utility>
  //#include "driver.h"
  #include "lexer.gen.h"
  #include "location.gen.h"
  using namespace fluster;
  namespace lits =  fluster::ast::lits;
  namespace ops =  fluster::ast::ops;
}

/*
%code {
skipToNextLine()
  {
    while(Lexer.lex() != yy::Parser::make_OUTDENT);
  }
}
*/

/*** Precedence Markers ***/

/* grouping */
%left       SEQ_EXEC        /* a; b */
            LIST            /* a, b, c */
;

/* assignment */
%right      ASSIGN          /* assignment */

/* anonymous functions */
%right      LAMBDA          /* a => a, (a,b) => a+b */

/* type assertion */
%left       TYPE_ASSERT     /* a: T */

/* arithmetic */
%left       DISJUNCT        /* | */
%left       CONJUNCT        /* & */
%left       IMPLY           /* -> */
%left       EQUALITY        /* ==, !=, #=, !#= */
%nonassoc   SPACESHIP       /* <=> */
%nonassoc   RELATIONAL      /* <, <=, >=, > */
%left       IN              /* a in b */
%left       LSHIFT RSHIFT;  /* <<, >> */
%left       ADD     /* + */
            SUB     /* - */
;
%left       MULT    /* * */
            DIV     /* / // */
            MOD     /* % mod // */
;
%right      POW     /* a ^ b */
            ROOT    /* a ^/ b */
;

/* prefix operations */
%right      COMPLEMENT      /* ~a */
            NEGATE          /* -a */
            TYPE_MUT        /* !T */
            TYPE_ARRAY      /* [N]T */
            TYPE_PTR        /* *T */
            TYPE_REF        /* &T */
            TYPE_OPT        /* ?T */
            IS              /* is T */
            HAS             /* has T */
            SQUARE_ROOT     /* ^/a */
            PREINCREMENT    /* ++a */
            PREDECREMENT    /* --a */
            SPREAD          /* ...a */
            CLONEOF         /* cloneof a */
            TYPEOF          /* typeof a */
            IMPORT          /* import '' */
            COMPOSE         /* @a */
;

/* postfix operations */
%left
            POSTINCREMENT   /* a++ */
            POSTDECREMENT   /* a-- */
            INVOKE          /* a() */
            SUBSCRIPT       /* a[] */
            PARAMETRIZE     /* a<> */
            ACCESS          /* a._ */
;

%token      KW_IF      /* start if statement */
%token      KW_ELSE    /* start else statement */
%token      KW_ELIF    /* start else if statement */
%token      KW_FOR     /* start for loop */
%token      KW_WHILE   /* start while loop */
%token      KW_UNTIL   /* start until loop */
%token      KW_REPEAT  /* start infinite loop */
%token      KW_CASE    /* declare dynamic-type reference structure */
%token      KW_TRY     /* attempt expression */
%token      KW_RETRY   /* retry attempted expression */
%token      KW_HANDLE  /* declare exception handling case */
%token      KW_RAISE   /* raise an exception case */
%token      KW_WITH    /* declare context */
%token      KW_STRUCT  /* declare structure */
%token      KW_CLASS   /* declare dynamic-type reference structure */

/*** Lexer Symbols ***/

    /* the S_ prefix indicates lexer symbols */
    /* TODO: drop prefix and make precendence UpperCamelCase */
%token      END 0
%token      INDENT OUTDENT NL
            /* grouping */
            SEMICOLON COMMA
            /* assignment */
            EQ PLUS_EQ DASH_EQ STAR_EQ FSLASH_EQ FSLASH_FSLASH_EQ
            CARET_FSLASH_EQ CARET_EQ AMPERSAND_EQ PIPE_EQ TILDE_EQ
            LANGLE_LANGLE_EQ RANGLE_RANGLE_EQ DASH_RANGLE_EQ
            /* anonymous functions */
            EQ_RANGLE
            /* type assertion */
            COLON
            /* membership */
            IN
            /* logical */
            PIPE AMPERSAND DASH_RANGLE
            /* equality */
            EQ_EQ EXCLAIM_EQ HASH_EQ EXCLAIM_HASH_EQ
            /* spaceship */
            LANGLE_EQ_RANGLE
            /* relational */
            LANGLE LANGLE_EQ RANGLE_EQ RANGLE
            /* shift */
            LANGLE_LANGLE RANGLE_RANGLE
            /* addition/subtraction */
            PLUS DASH
            /* multiplication */
            STAR
            /* division */
            FSLASH FSLASH_FSLASH
            /* modular division */
            PERCENT MOD
            /* power */
            CARET
            /* root */
            CARET_FSLASH
            /* prefix */
            DASH_DASH PLUS_PLUS
            TILDE NEGATE EXCLAIM
            IS HAS QUES
            DOT_DOT_DOT KW_CLONEOF KW_TYPEOF KW_IMPORT AT
            /* postfix */
            DOT
            /* other */
            LPAR RPAR LBRACK RBRACK LBRACE RBRACE
;

/*** Tagged Types ***/

%token <fluster::ast::Identifier::Ptr> Identifier
%token <fluster::ast::lits::Integer::Ptr> IntegerLiteral
%token <fluster::ast::lits::Float::Ptr> FloatLiteral
/*%token <fluster::ast::lits::Bytes> BytesLiteral*/
/*%token <fluster::ast::lits::Bits> BitsLiteral*/
%token <fluster::ast::lits::String::Ptr> StringLiteral

%type <fluster::ast::Expr::Ptr> expr
%type <fluster::ast::Node::Ptr> statement
%type <fluster::ast::Block::Ptr> program
%type <fluster::ast::Block::Ptr> code
%type <fluster::ast::Block::Ptr> block
%type <fluster::ast::IfStatement::Ptr> if
%type <fluster::ast::Node::Ptr> if_follow_up
%type <fluster::ast::Node::Ptr> line
%type <fluster::ast::Lambda::Ptr> lambda_expr
%type <fluster::ast::Expr::Ptr> lambda_body
%type <fluster::ast::CommaDelimitedList::Ptr> commalist_
%type <fluster::ast::CommaDelimitedList::Ptr> commalist
%type <fluster::ast::CommaDelimitedList::Ptr> par_list
/*
%type <fluster::ast::Node::Ptr> Brack_list
%type <fluster::ast::Node::Ptr> Brace_list
%type <fluster::ast::Node::Ptr> Angle_list
*/

%start program


%%


/*** structure ***/

program
  : code
    { root = $1; }
  ;

code
  : code line
    { $1->append($2); $$ = $1; }
  | line
    { $$ = ast::Block::Ptr::make(); $$->append($1); }
  ;

line
  : expr NL
    { $$ = $1; }
  | NL
    { $$ = ast::Block::empty(); }  /* TODO: handle empty statements better? */
  | statement
    { $$ = $1; }
  | error NL
    { yyerrok; }
  ;

block
  : INDENT code OUTDENT
    { $$ = $2; }  /* TODO: std::move()? */
  ;

/* Expressions */
statement
  : if
    { $$ = $1.castUp<ast::Node>(); }
  ;

expr
  /* atomic */
  : Identifier
    { $$ = $1; }

  | StringLiteral
    { $$ = $1; }

  | IntegerLiteral
    { $$ = $1; }

  | FloatLiteral
    { $$ = $1; }

  | LPAR expr RPAR
    { $$ = $2; }

  /* prefix */
  | PLUS_PLUS expr
    %prec PREINCREMENT
    { $$ = ops::PreIncrement::Ptr::make($2); }

  | DASH_DASH expr
    %prec PREDECREMENT
    { $$ = ops::PreDecrement::Ptr::make($2); }

  | DASH expr
    %prec NEGATE
    { $$ = ops::Negate::Ptr::make($2); }

  | CARET_FSLASH expr
    %prec SQUARE_ROOT
    { $$ = ops::Root::Ptr::make(
        fluster::ast::lits::Integer::Ptr::make(2),
        $2
      );
    }

  /* postfix */
  | expr PLUS_PLUS
    %prec POSTINCREMENT
    { $$ = ops::PostIncrement::Ptr::make($1); }

  | expr DASH_DASH
    %prec POSTDECREMENT
    { $$ = ops::PostDecrement::Ptr::make($1); }

  /* binary */
  | expr SEMICOLON expr
    %prec SEQ_EXEC
    { $$ = ops::Sequence::Ptr::make($1, $3); }

  | expr PLUS expr
    %prec ADD
    { $$ = ops::Add::Ptr::make($1, $3); }

  | expr DASH expr
    %prec SUB
    { $$ = ops::Subtract::Ptr::make($1, $3); }

  | expr STAR expr
    %prec MULT
    { $$ = ops::Multiply::Ptr::make($1, $3); }

  | expr FSLASH expr
    %prec DIV
    { $$ = ops::Divide::Ptr::make($1, $3); }

  | expr FSLASH_FSLASH expr
    %prec DIV
    { $$ = ops::IntDivide::Ptr::make($1, $3); }

  | expr CARET_FSLASH expr
    %prec ROOT
    { $$ = ops::Root::Ptr::make($1, $3); }

  | expr CARET expr
    %prec POW
    { $$ = ops::Power::Ptr::make($1, $3); }

  | expr EQ expr
    %prec ASSIGN
    { $$ = ops::Assign::Ptr::make($1, $3); }

  | expr COLON expr
    %prec TYPE_ASSERT
    { $$ = ops::AssertType::Ptr::make($1, $3); }

  /* other */

  | lambda_expr
    { $$ = $1.castUp<fluster::ast::Expr>(); }

  ;

lambda_body
  : expr
    { $$ = $1; }
/*
  | NL block
    { $$ = fluster::ast::ResultHaver::Ptr($2); }
*/
  ;


lambda_expr
  : par_list EQ_RANGLE lambda_body
  %prec LAMBDA
    { $$ = ast::Lambda::Ptr::make($1, $3); }
  ;


/* control flow */

if
  : KW_IF expr NL
      block
    if_follow_up
    { $$ = ast::IfStatement::Ptr::make($2, $4, $5); }
  ;


if_follow_up

  : %empty
    { $$ = ast::IfStatement::empty().castUp<ast::Node>(); }

  | KW_ELIF expr NL
      block
    if_follow_up
    { $$ = ast::IfStatement::Ptr::make($2, $4, $5).castUp<ast::Node>(); }

  | KW_ELSE NL
      block
    { $$ = $3; }
  ;

commalist_
  : expr
    { $$ = fluster::ast::CommaDelimitedList::fromFirst($1); }
  | commalist_ COMMA expr
    %prec LIST
    { $1->append($3); $$ = $1; }
  ;

commalist
  : commalist_
  ;

par_list
  : LPAR commalist RPAR
    { $$ = $2; }
  ;

/*
Brack_list
  : LBRACK commalist RBRACK
    { $$ = $2; }
  ;

Brace_list
  : LBRACE commalist RBRACE
    { $$ = $2; }
  ;

Angle_list
  : LANGLE commalist RANGLE
    { $$ = $2; }
  ;
*/


%%


//void yy::Parser::error(const syntax_error& err)
void yy::Parser::error(const location_type& loc, const std::string& msg)
{
  std::cerr << msg << " at " << loc << std::endl;
}
